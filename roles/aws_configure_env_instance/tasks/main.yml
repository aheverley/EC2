---

 - name: create VPC
   ec2_vpc_net:
     name: "{{ vpc_name }}"
     cidr_block: "{{ vpc_cidr }}"
     region: "{{ region }}"
     state: present
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
   register: vpc


 - name: Set VPC ID in variable
   set_fact:
     vpc_id: "{{ vpc.vpc.id }}"


 - name: associate subnet to the VPC
   ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ subnet_cidr }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
   register: subnet

 - name: create IGW
   ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
   register: igw


 - name: Route IGW
   ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "{{ route_name }}"


 - name: Create Security Group
   ec2_group:
    name: Web DMZ
    description: DMZ Security Group
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
   register: security_group

 - name: create a new ec2 key pair, returns generated private key
   ec2_key:
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ keypair_name }}"
    region: "{{ region }}"
    key_material: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDAdWRsjdmJLFZZpWmUnntKiej0gN5YwCaeg35OISLTjlscj3UzWVP+rc+ZxCDcb4tVf3rjVxqCT9yudMYL5E6ENDyJhHNrNeOvp+weZoh8/2To1HJ4sfGnxoqWILee8W0cEsDwyQH6sWTr+B1gp5a//KxVb5/0atZneyOVv0YVMn19kul7q/N+Oi0zq7P54432hUe8lJmL5qlNw5Yd3r4bkORG2NGQy2gZ/NvMITeo0fRhL3uTNfgiQcHib4QGpAHz4eGbqUtawzMEhZ2qe0vUZP3ZAW/J92VlqD1+9OwuZDCCCU1o2eWLX5u0KfW7mxi8o/SBUfc8PIsrcAOkg1yOK+fkp6FNP5g4AZN3ZcQGnrl3h0uc8+LgVBy7LB5v8S5/+miHgJNuYmV/DWWWxjC10oSPIZ0RPSuRLw1PSez7uusDEfbz5sdpaeedaVZLrcK1Ccd8fnihsdzuH1ndKBK0B3gyzOzhoSXYxsyUDxqzR6rBQVxeFIQhIiKOhYk9sSRh7sQ1g/CyDZDIXkYdJgOOwSry0pyge/8bNXapXpg3AiH9ekplBLPvSJvniG/smAQeJ/g2lSjcSf7Xk5YDFLv3IU/H+bx4OygzbU7Rfddo2RPmv5T7+kkL6H7O/WLT4cU6HxOGggLqDMTAl+9PZtqMCXc78Y4xc5yoWuTOh8ePjw== aheverle@redhat.com'
   register: keypair
   tags:
    - ec2_key

 - debug:
      var: keypair
   tags:
    - ec2_key
   
#- name: Download SSH Key to Ansible Controller
 # delegate_to: localhost
  #get_url:
   # url: "https://{{ ansible_user }}:{{ ansible_password }}@files.example.com/installer.rpm"
    #dest: "/tmp/{{ ansible_user }}"
    #owner: "{{ ansible_user }}"
  #tags: download,local

# - name: Copy EC2 Key Pair private key locally
#   copy: 
#     content: "{{ keypair.key.private_key }}" 
#     dest: "~/ansible_key.pem" #"./{{ ec2_key_directory }}ansible_key.pem"
#     mode: 0400
#   when: keypair.changed == true
#   tags:
#     - ec2_key

# - name: Create EC2 Instance
#   amazon.aws.ec2:
#    image: ami-0b0af3577fe5e3532
#    wait: yes
#    instance_type: t2.micro
#    region: "{{ region }}"
#    group_id: "{{ security_group }}"
#    vpc_subnet_id: "{{ subnet.subnet.id }}"
#    key_name: "{{ keypair.key.name  }}"
#    count_tag: "{{ ec2_tag }}"
#    exact_count: 3
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"

 - name: Create EC2 instances for node1
   ec2_instance:
     name: node1
     state: running
     network:
       assign_public_ip: true
     key_name: "{{ keypair.key.name }}"
     #     security_group: "{{ securitygroup_name }}"
     instance_type: t2.micro
     image_id: ami-0b0af3577fe5e3532
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
     region: "{{ region }}"
     # count: 1 
     state: running
     filters:
       instance-state-name: running
       "tag:Ansible_Demo": "{{ ec2_name_prefix }}-node1"
     tags:
       Ansible_node: "{{ ec2_name_prefix }}-node1"
       Workshop: "{{ ec2_name_prefix }}"
       uuid: "{{ ec2_name_prefix }}"
       guid: "{{ ec2_name_prefix }}"
       AWS_USERNAME: ec2-user
       owner: ec2-user
       short_name: "node1"
       username: "alan"
       ansible-workshops: "true"
     wait: "{{ ec2_wait }}"
     vpc_subnet_id: "{{ subnet.subnet.id }}"
     volumes:
       - device_name: /dev/sda1
         ebs:
           volume_type: gp2
           volume_size: 30
           delete_on_termination: true
   register: node1

 - debug:
     msg: "{{ node1 }}"

 - name: Create EC2 instances for node2
   ec2_instance:
     name: node2
     state: running
     network:
       assign_public_ip: true
     key_name: "{{ keypair.key.name }}"
     #     security_group: "{{ securitygroup_name }}"
     instance_type: t2.micro
     image_id: ami-0b0af3577fe5e3532
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
     region: "{{ region }}"
     # count: 1
     state: running
     filters:
       instance-state-name: running
       "tag:Ansible_Demo": "{{ ec2_name_prefix }}-node2"
     tags:
       Ansible_node: "{{ ec2_name_prefix }}-node2"
       Workshop: "{{ ec2_name_prefix }}"
       uuid: "{{ ec2_name_prefix }}"
       guid: "{{ ec2_name_prefix }}"
       AWS_USERNAME: ec2-user
       owner: ec2-user
       short_name: "node2"
       username: "alan"
       ansible-workshops: "true"
     wait: "{{ ec2_wait }}"
     vpc_subnet_id: "{{ subnet.subnet.id }}"
     volumes:
       - device_name: /dev/sda1
         ebs:
           volume_type: gp2
           volume_size: 30
           delete_on_termination: true
   register: node2

 - debug:
     msg: "{{ node2 }}"




