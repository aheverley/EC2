---

 - name: create VPC
   ec2_vpc_net:
     name: "{{ vpc_name }}"
     cidr_block: "{{ vpc_cidr }}"
     region: "{{ region }}"
     state: present
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
   register: vpc

 - debug:
      var: vpc

 - name: Set VPC ID in variable
   set_fact:
     vpc_id: "{{ vpc.vpc.id }}"


 - name: associate subnet to the VPC
   ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ subnet_cidr }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
   register: subnet

 - debug:
     var: subnet

 - name: create IGW
   ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
   register: igw


 - name: Route IGW
   ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "{{ route_name }}"

 - name: Create Security Group
   ec2_group:
    name: Web DMZ
    description: DMZ Security Group
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: tcp
        ports:
        #- 80
        - "{{ ports }}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports: 
        - 3389
        cidr_ip: 0.0.0.0/0
        
   register: security_group
   
 - debug:
     var: security_group
     
 - name: Set Group ID in variable
   set_fact:
     security_group: "{{ security_group.group_id }}"

 - name: Add Key Pair
   ec2_key:
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ keypair_name }}"
    region: "{{ region }}"
    key_material: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDQS7o2AF5E2qb9qVf2PNyApnIHSnnJXysRgq+nf9tHp3v1F1VVl2CixjWuJtNQucdVXZrUiBoPD8uRt0outPYLhpgMyyyw0z07Wj+JuhClVqi8WcIdIhTygxTW59FomUV6IyJ5OSm1FGX3C3zXN4kbTB+3AWsUd7weD/uTQWgQL8z+HvD/Q2qxxYHFjv+xWE6vsDqe4iDWwsNAknosblOLmYf6OUwGtExdNhnJMKl9mrzLAkvbJCmxK3SsXpW2d78EsKTFN5dGiQP/03Zmfr9agaBu1t7HdYhgujhUbCsHpDmNUJjx8c5EOP7EvlwlGx1cHzNkrK1GcPZWzCLerFNjaLGjOxeQERmRHYG3YW5Q3LEhjLi9vJon6xqke+Nl87x8TOVTt3Mh8rq1MYoGaJooyBFlCmbhxswvI/B8q+l8GBcQg8ZMeNsdBAKne8cuplJ6cJawBPOJz6uYDv8rUtXvhljiMqPgcXmeafLA+vgfWmSsF6qXs1x12PngEozXRqJXe0XFpcVMTRmLBqmGKaGSzns/Yw+0fDle06mp4Gfw7O9AbQSNBppJPnawtzaI5M5e+uxm5ON/QwFjkEjDpWrTTO8d/Xe2MB7gwIfkRXEDQFeiO/cyNHfNlzEkEXw6OMZUtKOY9C21iBcbGK8rQM0n7u5bggn4oVJ52KmYbdTuCQ== aheverle@redhat.com'
   register: keypair
   tags:
    - ec2_key

 - debug:
      var: keypair
   tags:
    - ec2_key
   
# - name: Copy EC2 Key Pair private key locally
#   copy: 
#     content: "{{ keypair.key.private_key }}" 
#     dest: "~/ansible_key.pem" #"./{{ ec2_key_directory }}ansible_key.pem"
#     mode: 0400
#   when: keypair.changed == true
#   tags:
#     - ec2_key

 - name: Create EC2 instance for node1
   ec2_instance:
     name: node1
     network:
       assign_public_ip: true
     key_name: "{{ keypair.key.name }}"
     security_group: "{{ security_group }}" #"{{ securitygroup_name }}"
     instance_type: t2.micro
     image_id: ami-0b0af3577fe5e3532
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
     region: "{{ region }}"
     # count: 1 
     state: running
     filters:
       instance-state-name: running
       "tag:Ansible_Demo": "{{ ec2_name_prefix }}-node1"
     tags:
       Ansible_node: "{{ ec2_name_prefix }}-node1"
       Workshop: "{{ ec2_name_prefix }}"
       uuid: "{{ ec2_name_prefix }}"
       guid: "{{ ec2_name_prefix }}"
       AWS_USERNAME: ec2-user
       owner: ec2-user
       short_name: "node1"
       username: "alan"
       ansible-workshops: "true"
     wait: "{{ ec2_wait }}"
     vpc_subnet_id: "{{ subnet.subnet.id }}"
     volumes:
       - device_name: /dev/sda1
         ebs:
           volume_type: gp2
           volume_size: 30
           delete_on_termination: true
   register: node1

 - debug:
     msg: "{{ node1 }}"

 - name: Create EC2 instances for node2
   ec2_instance:
     name: node2
     network:
       assign_public_ip: true
     key_name: "{{ keypair.key.name }}"
     security_group: "{{ security_group }}"
     instance_type: t2.micro
     image_id: ami-0b0af3577fe5e3532
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
     region: "{{ region }}"
     # count: 1
     state: running
     filters:
       instance-state-name: running
       "tag:Ansible_Demo": "{{ ec2_name_prefix }}-node2"
     tags:
       Ansible_node: "{{ ec2_name_prefix }}-node2"
       Workshop: "{{ ec2_name_prefix }}"
       uuid: "{{ ec2_name_prefix }}"
       guid: "{{ ec2_name_prefix }}"
       AWS_USERNAME: ec2-user
       owner: ec2-user
       short_name: "node2"
       username: "alan"
       ansible-workshops: "true"
     wait: "{{ ec2_wait }}"
     vpc_subnet_id: "{{ subnet.subnet.id }}"
     volumes:
       - device_name: /dev/sda1
         ebs:
           volume_type: gp2
           volume_size: 30
           delete_on_termination: true
   register: node2

 - debug:
     msg: "{{ node2 }}"




