---
- name: Including {{ ec2_virtualmachine_ostype }} Specific Variables
  include_vars: "{{ ec2_virtualmachine_ostype }}.yml"


- name: setting fact if multicloud var is set
  set_fact:
    ec2_name_tag: "{{ virtualmachine_name_choice }}"
  when: virtualmachine_name_choice is defined

 - name: Create EC2 instance for node1
   ec2_instance:
     name: node1
     network:
       assign_public_ip: true
     key_name: "{{ keypair_name }}"
     security_group: "{{ security_group }}" #"{{ securitygroup_name }}"
     instance_type: t2.micro
     image_id: ami-0b0af3577fe5e3532
     #aws_access_key: "{{ aws_access_key }}"
     #aws_secret_key: "{{ aws_secret_key }}"
     region: "{{ region }}"
     # count: 1 
     state: running
     filters:
       instance-state-name: running
       "tag:Ansible_Demo": "{{ ec2_name_prefix }}-node1"
     tags:
       Ansible_node: "{{ ec2_name_prefix }}-node1"
       Workshop: "{{ ec2_name_prefix }}"
       uuid: "{{ ec2_name_prefix }}"
       guid: "{{ ec2_name_prefix }}"
       AWS_USERNAME: ec2-user
       owner: ec2-user
       short_name: "node1"
       username: "alan"
       ansible-workshops: "true"
     wait: "{{ ec2_wait }}"
     vpc_subnet_id: "{{ subnet.subnet.id }}"
     volumes:
       - device_name: /dev/sda1
         ebs:
           volume_type: gp2
           volume_size: 30
           delete_on_termination: true
   register: node1

 - debug:
     msg: "{{ node1 }}"

#- name: Provision EC2 instance(s)
#  ec2_instance:
#    region: "{{ aws_region }}"
#    instance_type: "{{ ec2_instance_type }}"
#    image: "{{ ec2_ami_id }}"
#    key_name: "{{ ec2_keypair_name }}"
#    network:
#      assign_public_ip: true
#    vpc_subnet_id: "{{ subnet_name }}"
#    key_name: "ansible_key"
#    wait: yes
#    volumes:
#      - device_name: /dev/sda1
#        volume_type: gp2
#        volume_size: "{{ ec2_volume_size }}"
#        delete_on_termination: true
#    security_group: "{{ ec2_security_group }}"
#    tags:
      #Name: "{{ ec2_name_tag }}"
#      Name: "{{ virtualmachine_name_choice if (virtualmachine_name_choice is defined and virtualmachine_name_choice != '') else ec2_name_tag }}"
#      Provisioner: "{{ ec2_provisioner_tag }}"
#      Created: "{{ ec2_created_tag }}"
#    user_data: "{{ lookup('template', ec2_userdata_template_file_name) }}"
    #exact_count: "{{ ec2_instance_count }}"
    #count_tag: 
    #  Name: "{{ virtualmachine_name_choice if (virtualmachine_name_choice is defined) else ec2_name_tag }}"
    #  Provisioner: "{{ ec2_provisioner_tag }}"
    #  Created: "{{ ec2_created_tag }}"
# register: ec2

- name: Wait for connection to come up
  wait_for: 
    host: "{{ item.public_ip }}" 
    port: "{{ wait_for_port }}" 
    state: started
  with_items: "{{ ec2.instances }}"
  #when: ec2_virtualmachine_ostype == "Linux"

# - name: Setting stats for the new VM public IP
#   set_stats:
#     data:
#       provisioned_vm_public_ip: "{{ ec2.instances[0].public_ip }}"
#     aggregate: yes

# - name: Setting stats for the new VM public name
#   set_stats:
#     data:
#       provisioned_vm_name: "{{ virtualmachine_name_choice if (virtualmachine_name_choice is defined and virtualmachine_name_choice != '') else ec2_name_tag }}"
#     aggregate: yes

# - name: Setting stats for the new VM public name
#   set_stats:
#     data:
#       provisioned_vm_cloud: "AWS"
#     aggregate: yes



# - name: Pause for 30 seconds
#   pause:
#     seconds: 30
